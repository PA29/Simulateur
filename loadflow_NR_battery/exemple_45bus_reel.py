# -*- coding: utf-8 -*-
"""
Created on Tue Jan 15 14:30:07 2019

@author: Loïc
"""
import loadflow_NR as lf
import loadflow_NR.construct
import loadflow_NR.calc
import loadflow_NR.lines_values
import numpy as np

###### valeurs per unit ############################################
Sb = 10000 #VA (à choisir)
Pb = 10000 #W (égal à Sb/sqrt(2))
Qb = 10000 #VAR (égal à Sb/sqrt(2))
Ub = 230 #V (à choisir)
Ib = Sb/(3**(1/2) * Ub) #= 14.4337567297 A (calculé)
Zb = 3*Ub**2/Sb #= 27.7128129211 Ohm (calculé)
####################################################################
#représentation
#D=np.exp(2j*np.pi*np.array(lines)[:,0]/len(buses)), np.exp(2j*np.pi*np.array(lines)[:,1]/len(buses))
#plt.plot(np.real(D), np.imag(D), color='green')
#plt.scatter(np.real(D), np.imag(D))
#############################################################################

### ligne [bus_1, bus_2, r (ohm/km), x (ohm/km), longueur(km)] ###############
## 0.44 et 0.35 mOhm/km (alu torsadé 70mm^2)
r, x = 0.44, 0.35
lines = [[0, 1, r, x, 0.1], 
         [1, 2, r, x, 0.1], 
         [2, 3, r, x, 0.05],
         [3, 4, r, x, 0.05],
         [4, 5, r, x, 0.1],
         [5, 6, r, x, 0.05],
         [6, 7, r, x, 0.075],
         [7, 8, r, x, 0.05],
         [8, 9, r, x, 0.1],
         [9, 10, r, x, 0.05],
         [10, 11, r, x, 0.05],
         [11, 12, r, x, 0.2],
         [11, 13, r, x, 0.1],
         [13, 14, r, x, 0.05],
         [14, 15, r, x, 0.3],
         [9, 16, r, x, 0.1],
         [16, 17, r, x, 0.1],
         [17, 18, r, x, 0.1],
         [18, 19, r, x, 0.075],
         [19, 20, r, x, 0.08],
         [18, 21, r, x, 0.09],
         [21, 22, r, x, 0.1],
         [6, 23, r, x, 0.05],
         [23, 24, r, x, 0.1],
         [24, 25, r, x, 0.2],
         [25, 26, r, x, 0.04],
         [26, 27, r, x, 0.001],
         [27, 28, r, x, 0.08],
         [3, 29, r, x, 0.03],
         [29, 30, r, x, 0.2],
         [30, 31, r, x, 0.05],
         [31, 32, r, x, 0.05],
         [30, 33, r, x, 0.25],
         [0, 34, r, x, 0.1],
         [34, 55, r, x, 0.1],
         [55, 56, r, x, 0.2],
         [56, 57, r, x, 0.3],
         [56, 58, r, x, 0.04],
         [34, 35, r, x, 0.04],
         [35, 36, r, x, 0.05],
         [36, 37, r, x, 0.1],
         [37, 38, r, x, 0.25],
         [38, 39, r, x, 0.5],
         [39, 40, r, x, 0.2],
         [38, 41, r, x, 0.04],
         [41, 42, r, x, 0.1],
         [42, 43, r, x, 0.2],
         [43, 44, r, x, 0.05],
         [35, 45, r, x, 0.2],
         [45, 46, r, x, 0.1],
         [46, 47, r, x, 0.23],
         [47, 48, r, x, 0.09],
         [48, 49, r, x, 0.05],
         [48, 50, r, x, 0.2],
         [47, 51, r, x, 0.1],
         [51, 52, r, x, 0.3],
         [51, 53, r, x, 0.15],
         [53, 54, r, x, 0.2],
         [43, 28, r, x, 0.1]]
for line in lines:
    line[2] = line[2]/Zb
    line[3] = line[3]/Zb
    line[4] = line[4]
##############################################################################  

### bus [id_bus, type_bus (0slack, 1conso, 2prod), P ou theta pour slack, Q ou V]
buses = [[0, 0, 0, 400], 
         [1, 1, -9, -9*0.4], 
         [2, 1, -6, -6*0.4],
         [3, 1, 0, 0],
         [4, 1, -6, -6*0.4],
         [5, 1, -9, -9*0.4],
         [6, 1, 0, 0],
         [7, 1, -12, -12*0.4],
         [8, 1, -12, -12*0.4],
         [9, 1, 0, 0],
         [10, 1, -12, -12*0.4],
         [11, 1, -6, -6*0.4],
         [12, 1, -9, -9*0.4],
         [13, 1, -12, -12*0.4],
         [14, 1, -15, -15*0.4],
         [15, 1, -15, -15*0.4],
         [16, 1, -3, -3*0.4],
         [17, 1, -9, -9*0.4],
         [18, 1, 0, 0],
         [19, 1, -15, -15*0.4],
         [20, 1, -6, -6*0.4],
         [21, 1, -9, -9*0.4],
         [22, 1, -2, -2*0.4],
         [23, 1, -6, -6*0.4],
         [24, 1, -6, -6*0.4],
         [25, 1, -6, -6*0.4],
         [26, 1, -9, -9*0.4],
         [27, 1, -9, -9*0.4],
         [28, 1, -6, -6*0.4],
         [29, 1, -6, -6*0.4],
         [30, 1, 0, 0],
         [31, 1, -6, -6*0.4],
         [32, 1, -9, -9*0.4],
         [33, 1, -6, -6*0.4],
         [34, 1, 0, 0],
         [35, 1, 0, 0],
         [36, 1, -12, -12*0.4],
         [37, 1, -6, -6*0.4],
         [38, 1, 0, 0],
         [39, 1, -12, -12*0.4],
         [40, 1, -12, -12*0.4],
         [41, 1, -3, -3*0.4],
         [42, 1, -6, -6*0.4],
         [43, 1, 0, 0],
         [44, 1, -12, -12*0.4],
         [45, 1, -12, -12*0.4],
         [46, 1, -6, -6*0.4],
         [47, 1, 0, 0],
         [48, 1, 0, 0],
         [49, 1, -12, -12*0.4],
         [50, 1, -12, -12*0.4],
         [51, 1, 0, 0],
         [52, 1, -12, -12*0.4],
         [53, 1, -6, -6*0.4],
         [54, 1, -12, -12*0.4],
         [55, 1, -30, -30*0.4],
         [56, 1, 0, 0],
         [57, 1, -18, -18*0.4],
         [58, 1, -9, -9*0.4]]
buses = sorted(buses, key=lambda buses: buses[1]) #sort by type of bus

for bus in buses:
    if bus[1] == 0:
        bus[3] = bus[3]/Ub
    if bus[1] == 1:
        bus[2] = bus[2]*1000/Pb
        bus[3] = bus[3]*1000/Qb
    if bus[1] == 2:
        bus[2] = bus[2]*1000/Pb
        bus[3] = bus[3]/Ub
#############################################################################

Y = lf.construct.Y(lines, buses)
P, Q, t0, v0 = lf.construct.powers(buses)
powers=[P, Q, t0, v0]
eps = 10**-6
m_iter = 10
V, theta, duree, err, L= lf.calc.lf_nr(Y, powers, eps, m_iter)
if len(L) < m_iter:
    Pf, Qf = lf.calc.calc_power(theta, V, Y)
    I = lf.lines_values.currents(theta, V, Y)
    Sl = lf.lines_values.losses(theta, V, Y)
else:
    print("LE RESEAU N'A PAS PU ETRE RESOLU, VERIFIEZ LES PARAMETRES")

######### retour valeurs réelles #############################################
P_r = Pf*Pb
Q_r = Qf*Qb
V_r = V*Ub
theta_r = theta
I_r = I*Ib
S_r = Sl*Sb
##############################################################################